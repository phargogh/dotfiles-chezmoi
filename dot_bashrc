# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# basic path modification for custom scripts
export PATH=$PATH:$HOME/bin

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

if [ -e /usr/share/terminfo/x/xterm-256color ]; then
    export TERM='xterm-256color'
else
    export TERM='xterm-color'
fi

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

export MYPS='$(echo -n "${PWD/#$HOME/~}" | awk -F "/" '"'"'{if (length($0) > 14) { if (NF>4) print $1 "/" $2 "/.../" $(NF-1) "/" $NF; else if (NF>3) print $1 "/" $2 "/.../" $NF; else print $1 "/.../" $NF; } else print $0;}'"'"')'

export current_vcs_state="$(vcprompt -f '%s %b:%r%m')"
#export in_vcs='$(if [ "`vcprompt`" != "" ]; then echo -e "\e[35;1m["${current_vcs_state}"]"; else echo ""; fi)'
export in_vcs=''

export in_vim='$(if [ "$VIM" != "" ]; then echo -e "\e[35;1m[VIM] \e[0;35m$vim_num_buffers:$vim_active_buffer"; else echo ""; fi)'

export in_ssh='$(if [ "$SSH_CONNECTION" != "" ]; then echo -e "\e[36;1m[SSH]"; else echo ""; fi)'
export in_screen='$(if [ "$STY" != "" ]; then echo -e "\e[33;1m[Screen: $STY]"; else echo ""; fi)'
export VCPROMPT='[$(vcprompt)]'
if [ "$color_prompt" = yes ]; then
    if [ "$VIM" != "" ]
    then
        in_vim="${in_vim}\n"
        newline="\n"
    fi

    if [ "$STY" != "" ];
    then
        in_screen="${in_screen}\n"
        newline="\n"
    fi

    PS1="$newline$(eval 'echo ${in_ssh}')$(eval 'echo ${in_vcs}')${VCPROMPT}\n${in_screen}${in_vim}${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]$(eval 'echo ${MYPS}')\[\033[00m\]\$ "
else
    PS1="[$(vcprompt)]\n${debian_chroot:+($debian_chroot)}\u@\h:\w\$ "
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
else
    alias ls='ls -G'
fi

# some more ls aliases
alias ll='ls -lFG'
alias lla='ls -alFG'
alias la='ls -AG'
alias l='ls -CFG'



# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

export PATH=$PATH:$HOME/.cabal/bin
export PATH=$PATH:/sbin
#export LD_PRELOAD="$HOME/bin/stderred/lib64/stderred.so"
EDITOR=vim

export PERL_LOCAL_LIB_ROOT="$HOME/perl5";
export PERL_MB_OPT="--install_base $HOME/perl5";
export PERL_MM_OPT="INSTALL_BASE=$HOME/perl5";
export PERL5LIB="$HOME/perl5/lib/perl5/x86_64-linux:$HOME/perl5/lib/perl5";

# If we're on a mac, then add the homebrew cellar to the front of PATH
if [ "$(uname)" == "Darwin" ]; then
    echo "Tweaking for Darwin..."
    #export PATH=/usr/local/sbin:$/usr/local/bin:$HOME/perl5/bin:$HOME/.local/bin:/usr/texbin:$PATH
    export PATH=/Library/TeX/texbin/:$PATH
    alias qgis='/Applications/QGIS.app/Contents/MacOS/QGIS'
    #EDITOR=/usr/local/bin/vim
    EDITOR=vim
    source /usr/local/etc/bash_completion.d/hg-completion.bash
    export TERM='xterm-256color'
    export NVIM_TUI_ENABLE_TRUE_COLOR=1
    if [ -f /usr/local/share/liquidprompt ]; then
        . /usr/local/share/liquidprompt
    fi
fi
#export HGEDITOR="$HOME/.hgeditor"

# The next line updates PATH for the Google Cloud SDK.
source '$HOME/google-cloud-sdk/path.bash.inc'

# The next line enables shell command completion for gcloud.
source '$HOME/google-cloud-sdk/completion.bash.inc'
